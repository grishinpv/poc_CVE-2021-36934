#pragma once

#include "stdafx.h"
#include <ntstatus.h>

//#include "util.h"


typedef DWORD(WINAPI* NTQUERYDIRECTORYOBJECT)(HANDLE, OBJDIR_INFORMATION*, DWORD, DWORD, DWORD, DWORD*, DWORD*);
NTQUERYDIRECTORYOBJECT NtQueryDirectoryObject;

typedef DWORD(WINAPI* NTOPENDIRECTORYOBJECT)(HANDLE *, DWORD, OBJECT_ATTRIBUTES*);
NTOPENDIRECTORYOBJECT  NtOpenDirectoryObject;

LPWSTR pGetLastError(DWORD dwError) {
	LPWSTR strErrorMessage = NULL;

	FormatMessage(
		FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_ARGUMENT_ARRAY | FORMAT_MESSAGE_ALLOCATE_BUFFER,
		NULL,
		dwError,
		0,
		(LPWSTR)&strErrorMessage,
		0,
		NULL);

	return strErrorMessage;
}

bool CheckPath(WCHAR *wFullPath) {
	//WIN32_FIND_DATA FindFileData;

	//if (FindFirstFileW(wFullPath, &FindFileData) == INVALID_HANDLE_VALUE)
	if (!CheckFile(wFullPath))
	{
		//cout << "[-] File not found" << endl;
		return false;
	}

	return true;
}

bool CheckFile(WCHAR *wFullPath) {
	BOOL reussite = FALSE;
	HANDLE hFile = NULL;

	//reussite = ((hFile = CreateFile(wFullPath, 0, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL)) && hFile != INVALID_HANDLE_VALUE);
	reussite = ((hFile = CreateFile(wFullPath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, NULL)) && hFile != INVALID_HANDLE_VALUE);
	if (reussite)
		CloseHandle(hFile);
	return reussite;
}